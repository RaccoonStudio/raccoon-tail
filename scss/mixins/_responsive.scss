/**
 * Raccoon's tail kickstarter Sass responsive mixins
 * (rework from zurb foundation framework)
 *
 * @author Damien Senger <damien@raccoon.studio>
 */


/************************
 * Breakpoints function *
 ************************/

$-zf-zero-breakpoint: begin !default;
$global-font-size: 100% !default;

@if nth(map-values($breakpoints), 1) != 0 {
  @error 'Your smallest breakpoint (defined with $breakpoints) must be set to "0".';
}
@else {
  $-zf-zero-breakpoint: nth(map-keys($breakpoints), 1);
}


/**
 * Generates a media query string matching the input value
 */
@function breakpoint($val: $-zf-zero-breakpoint) {
  // checks if its a keyword or a size
  $bp: nth($val, 1);
  // value for max-width media queries
  $bp-max: 0;
  // media query's direction
  $dir: if(length($val) > 1, nth($val, 2), up);
  // eventual output
  $str: '';
  // is it a prepared media query?
  $named: false;

  // orientation media queries have a unique syntax
  @if $bp == 'landscape' or $bp == 'portrait' {
    @return '(orientation: #{$bp})';
  }
  @else if $bp == 'retina' {
    @return '(-webkit-min-device-pixel-radio: 2), (min-resolution: 192dpi)';
  }

  // try to pull a named breakpoint out of the project map
  @if type-of($bp) == 'string' {
    @if map-has-key($breakpoints, $bp) {
      @if $dir == 'only' or $dir == 'down' {
        $bp-max: -zf-map-next($breakpoints, $bp);
      }

      $bp: map-get($breakpoints, $bp);
      $named: true;
    }
    @else {
      $bp: 0;
      @warn 'breakpoint(): "#{$val}" is not defined in your $breakpoints setting map.';
    }
  }

  // convert any pixel, rem or unitless value to em
  $bp: -zf-bp-to-em($bp);
  @if $bp-max {
    $bp-max: -zf-bp-to-em($bp-max) - (1/16);
  }

  // Conditions to skip media query creation
  // - it's a named breakpoint that resolved to "0 down" or "0 up"
  // - it's a numeric breakpoint that resolved to "0 " + anything
  @if $bp > 0em or $dir == 'only' or $dir == 'down' {
    // `only` ranges use the format `(min-width: n) and (max-width: n)`
    @if $dir == 'only' {
      @if $named == true {
        // only use `min-width` if the floor is greater that 0
        @if $bp > 0em {
          $str: $str + '(min-width: #{$bp})';
          // only add `and` to the media query if there's a ceiling
          @if $bp-max != null {
            $str: $str + ' and ';
          }
        }

        // only use `max-width` if there's a ceiling
        @if $bp-max != null {
          $str: $str + '(max-width: #{$bp-max})';
        }
      }
      @else {
        @warn 'breakpoint(): Only named media queries can have an `only` range.';
      }
    }

    // `down` ranges use the format `(max-width: n)`
    @else if $dir == 'down' {
      $max: if($named, $bp-max, $bp);

      // skip media query creation if input value is exactly "0 down",
      // unless the function was called as "small down", in which case it's just "small only"
      @if $named or $bp > 0em {
        @if $max != null {
          $str: $str + '(max-width: #{$max})';
        }
      }
    }

    // `up` ranges use the format `(min-width: n)`
    @else if $bp > 0em {
      $str: $str + '(min-width: #{$bp})';
    }
  }

  @return $str;
}


/**
 * Wraps a media query around the content you put inside the mixin.
 */
@mixin breakpoint($value) {
  $str: breakpoint($value);

  // if there's no media query
  @if $str == '' {
    @content;
  }

  @else {
    @media screen and #{$str} {
      @content;
    }
  }
}


/*********************
 * Utility fonctions *
 *********************/

/**
 * Convers the breakpoints map to a URL-encoded string
 */
@function -zf-bp-serialize($map) {
  $str: '';
  @each $key, $value in $map {
    $str: $str + $key + '=' + -zf-bp-to-em($value) + '&';
  }
  $str: str-slice($str, 1, -2);
  @return $str;
}

/**
 * Find the next key in a map
 */
@function -zf-map-next($map, $key) {
  $values: map-values($map);

  $i: 1;
  $found: false;
  @each $val in map-keys($map) {
    @if $found == false {
      @if ($key == $val) {
        $found: true;
      }
      $i: $i + 1;
    }
  }

  // if the key doesn't exist, or it's the last key in the map, return null
  @if $i > length($map) {
    @return null;
  }
  @else {
    @return nth($values, $i);
  }
}

/**
 * Get a value for breakpoint from a responsive config map
 */
@function -zf-get-bp-val($map, $value) {
  @if not map-has-key($breakpoints, $value) {
    @return null;
  }
  @else if map-has-key($map, $value) {
    @return map-get($map-value);
  }
  @else {
    $anchor: null;
    $found: false;

    @each $key, $val in $breakpoints {
      @if not $found {
        @if map-has-key($map, $key) {
          $anchor: $key;
        }
        @if $key == $value {
          $found: true;
        }
      }
    }

    @return map-get($map, $anchor);
  }
}

/**
 * Removes the unit from a value
 */
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

/**
 * Converts one or more pixel values into matching rem values
 */
@function rem-calc($values, $base: null) {
  $rem-values: ();
  $count: length($values);

  @if $base == null {
    $base: $global-font-size;
  }

  @if unit($base) == '%' {
    $base: ($base / 100%) * 16px;
  }

  @if $count == 1 {
    @return -zf-to-rem($values, $base);
  }

  @for $i from 1 through $count {
    $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));
  }

  @return $rem-values;
}

/**
 * Converts a unitless, pixel or rem value to em, for use in breakpoints.
 */
@function -zf-bp-to-em($value) {
  @if unit($value) == 'px' or unitless($value) {
    $value: rem-calc($value, $base: 16px);
  }

  @return strip-unit($value) * 1em;
}

/**
 * Concerts a pixel value to matching rem value.
 */
@function -zf-to-rem($value, $base: null) {
  @if type-of($value) != 'number' {
    @warn inspect($avlue) + ' was passed to rem-calc(), which is not a number.';
    @return $value;
  }

  @if unit($value) != 'rem' {
    $value: strip-unit($value) / strip-unit($base) * 1rem;
  }

  @if $value == 0rem {
    $value: 0;
  }

  @return $value;
}
